#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <windows.h>
using namespace std;

struct DGNode//struct for dot_graph to store Node, with an unique index and name.
{
    //WARNING: Index can't be larger than 10010!
    DGNode(char* NameofNode, unsigned int Length, unsigned int Index)
    {
        for(unsigned int i = 0; i < Length; ++i)
            name[i] = NameofNode[i];
        index = Index;
        name[Length] = '\0';
    }
    unsigned int index;
    char name[25];
};

class dot_graph//Class for getting a .gv file to use in the graphviz.
{
private:
    string int2string(unsigned int idx)//Returns a unique string generated by the index for naming.
    {
        ++idx;//to prevent idx=0 problem.
        char aa[9];//tmp to store string.
        int now = -1;
        while(idx != 0)//"reverse-hash-like" way to build the string, all upper-case letters.
        {
            aa[++now] = 'A' + idx % 26;
            idx /=26;
        }
        aa[++now] = '\0';
        string ret(aa);
        return ret;
    }
    string convert2string(int num)//Convert a number into string, modifying nothing. like: 3 to "3", etc.
    {
        char aa[66];
        sprintf(aa, "%d", num);
        string ret(aa);
        return ret;
    }
    string getstring(DGNode n)//Returns the name of the node, changint the special char into its escapes.
    {
        char esc[90];
        unsigned int num = strlen(n.name);
        int chgnow = -1;
        for(unsigned int i = 0; i < num; ++i)
        {
            if(n.name[i] == '"' || n.name[i] == '\\')
            {
                esc[++chgnow] = '\\';
                esc[++chgnow] = n.name[i];
            }
            else
            {
                esc[++chgnow] = n.name[i];
            }
        }
        string ret(esc);
        return ret;
    }
    bool have_outputed(DGNode ex)
    {
        return outed[ex.index];
    }
    void set_outputed(DGNode ex)
    {
        outed[ex.index] = true;
    }
    bool outed[10010], highlighted[10010];//That's why!
    string dot_phrase;//Stores the text for .gv file.
public:
    void init()
    {
        dot_phrase = "digraph G {\nsize = \"4, 4\";\n";//The fixed ones of the .gv file.
        memset(outed, false, sizeof(outed));
        memset(highlighted, false, sizeof(highlighted));
    }
    void sethighlight(DGNode ex)
    {
        highlighted[ex.index] = true;
    }
    void addedge(DGNode from, DGNode to, int weight, bool highlight)
    {
        //Use it to create an edge between two DGNodes.
        if(highlight)
        {
            dot_phrase += "edge[color = red];\n";
        }
        string fromidxstr = int2string(from.index);
        string toidxstr = int2string(to.index);
        dot_phrase += fromidxstr + " -> " + toidxstr + " [label = \"" + convert2string(weight) + "\"];\n";
        if(!have_outputed(from))
        {
            dot_phrase += int2string(from.index) + "[label = \"" + getstring(from) + "\"";
            if(highlighted[from.index])
            {
                dot_phrase += ", color = red";
            }
            dot_phrase += "];\n";
            set_outputed(from);
        }
        if(!have_outputed(to))
        {
            dot_phrase += int2string(to.index) + "[label = \"" + getstring(to) + "\"";
            if(highlighted[to.index])
            {
                dot_phrase += ", color = red";
            }
            dot_phrase += "];\n";
            set_outputed(to);
        }
    }
    bool getdv(char* path)//Creates the .gv file.
    {
        FILE* ofile = fopen(path, "w");
        if(ofile == NULL) return false;
        int num = dot_phrase.length();
        for(int i = 0; i < num; ++i)
        {
            fprintf(ofile, "%c", dot_phrase[i]);
        }
        fprintf(ofile, "}\n");
        return true;
    }
    bool generateJPG(char* dvpath)//Only runs on windows.
    {
        string run = "dot ";
        run += dvpath;
        run += " -Tjpg -O";
        return WinExec(run.c_str(), SW_HIDE);
    }
};
//* Delete the first '/' to disable the code. 
int main()//Sample Code
{
    char a[] = "Node A";
    char b[] = "Node B";
    char out[] = "out.gv";
    dot_graph DV;
    DV.init();
    DGNode aa(a, strlen(a), 1);// name = "Node A", idx = 1
    DGNode bb(b, strlen(b), 2);
    DGNode cc(a, strlen(a), 3);
    DV.sethighlight(aa);
    DV.addedge(aa, cc, 2, false);
    DV.addedge(bb, aa, 2, true);
    DV.addedge(aa, bb, 3, true);// add an edge from aa to bb, with weight = 3, and highlighted.
    DV.getdv(out);// generates the .dv file in "out.dv"
    DV.generateJPG(out);
    return 0;
}//*/